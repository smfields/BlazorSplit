@using Microsoft.JSInterop
@implements IAsyncDisposable

<h3 class="text-lg font-medium mb-2">@Title</h3>
@if (ChildContent != null)
{
    <div style="display: none;" @ref="ContentElement">
        @ChildContent
    </div>
}
<div class="relative markdown group">
    <pre>
        <code class=@("language-" + Language) @ref="_previewElement"></code>
    </pre>
</div>

@code {
    [Parameter, EditorRequired]
    public string Title { get; set; }
    
    [Parameter]
    public string Language { get; set; }
    
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    
    [Parameter]
    public ElementReference ContentElement { get; set; }

    [Inject]
    public IJSRuntime JsRuntime { get; set; }
    
    private IJSObjectReference? _module;
    private ElementReference _previewElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/BlazorSplit.Shared/Main/CodePreview/CodeBlock.razor.js");
        }
        
        await GenerateContent();
    }

    private async Task GenerateContent()
    {
        if (_module != null)
        {
            await _module.InvokeVoidAsync("generateContent", ContentElement, _previewElement, Language);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            try
            {
                await _module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }

}